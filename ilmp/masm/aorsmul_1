
.code
	ALIGN 16
func_1 proc
win	push rsi
win	push rdi
	push rbx

	mov rax,[rx1]
	mov rbx,1
lin mov r8,rx2
	lea rdi,[rx0+rx2*8]
	lea rsi,[rx1+rx2*8]
win	mov rcx,r9

	test r8b,1
	jnz lab_b13

lab_b02:
	xor r11,r11
	test r8b,2
	jnz lab_b2

lab_b0:
	sub rbx,r8
	mul rcx
	mov r9,rdx
	mov r8,[rdi+rbx*8-8]
	jmp lab_e0

	ALIGN 16
lab_b2:
	neg rbx
	sub rbx,r8
	mul rcx
	mov r8,[rdi+rbx*8+8]
	mov r9,rdx
	jmp lab_e2

	ALIGN 16
lab_b13:
	xor r9,r9
	test r8b,2
	jnz lab_b3

lab_b1:
	add rbx,rbx
	sub rbx,r8
	jnc lab_1
	mul rcx
	mov r10,[rdi+rbx*8-16]
	mov r11,rdx
	jmp lab_e1
	
	ALIGN 16
lab_b3:
	xor rbx,rbx
	sub rbx,r8
	mul rcx
	mov r10,[rdi+rbx*8]
	jmp lab_e3

	ALIGN 16
lab_top:
lab_e1:
	ADDSUB r10,rax
	mov rax,[rsi+rbx*8-8]
	adc r11,0
	mul rcx
	ADDSUB r10,r9
	mov r9,rdx
	mov r8,[rdi+rbx*8-8]
	adc r11,0
	mov [rdi+rbx*8-16],r10
lab_e0:
	ADDSUB r8,rax
	adc r9,0
	mov rax,[rsi+rbx*8]
	mul rcx
	mov r10,[rdi+rbx*8]
	ADDSUB r8,r11
	mov [rdi+rbx*8-8],r8
	adc r9,0
lab_e3:
	mov r11,rdx
	ADDSUB r10,rax
	mov rax,[rsi+rbx*8+8]
	adc r11,0
	mul rcx
	mov r8,[rdi+rbx*8+8]
	ADDSUB r10,r9
	mov r9,rdx
	mov [rdi+rbx*8],r10
	adc r11,0
lab_e2:
	ADDSUB r8,rax
	adc r9,0
	mov rax,[rsi+rbx*8+16]
	mul rcx
	mov r10,[rdi+rbx*8+16]
	ADDSUB r8,r11
	mov r11,rdx
	adc r9,0
	mov [rdi+rbx*8+8],r8
	add rbx,4
	jnc lab_top

lab_end:
	ADDSUB r10,rax
	adc r11,0
	ADDSUB r10,r9
	adc r11,0
	mov [rdi-8],r10
	mov rax,r11
	
	pop rbx
win	pop rdi
win	pop rsi
	ret
	
	ALIGN 16
lab_1:
	mul rcx
	ADDSUB [rdi-8],rax
	mov rax,rdx
	adc rax,0
	pop rbx
win	pop rdi
win	pop rsi
	ret
func_1 endp
end
